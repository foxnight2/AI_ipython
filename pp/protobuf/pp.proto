// protoc --python_out=. pp.proto

syntax = "proto2";


// tensor
message TensorShape {
    repeated int64 dim = 1;
}

message Tensor {
    optional TensorShape shape = 1;
    repeated float data = 2 [packed = true];
    repeated float grad = 3 [packed = true];
    // repeated double data_float64 = 4 [packed = true];
    // repeated double grad_float64 = 5 [packed = true];
    // optional bytes data_bytes = 4; // base64.b64encode(numpy.ndarray)
}

message TensorVector {
  repeated Tensor tensors = 1;
}


// model

message ModelParameter {
    
    optional string name = 1;
    repeated ModuleParameter module = 100; // inline
    repeated string input_names = 101;
    repeated string output_names = 102;

    optional string reset_model = 200;
}

// reader
message ReaderParameter {
    optional string name = 1;
    repeated ModuleParameter dataset = 2;
    repeated DataLoaderParameter dataloader = 3;
}


// solver 
message SolverParameter {
    
    optional string name = 1;
    
    //required oneof model {
    //    optional ModelParameter model = 2;  // inline
    //    optional string model_file = 3; // file
    //}
    optional string model_file = 2; // file
    optional ModelParameter model = 3;  // inline
    
    optional string optimizer_file = 20;
    optional OptimizerParameter optimizer = 21;
    optional LRSchedulerParameter lr_scheduler = 22;

    optional string reader_file = 30;
    repeated ModuleParameter dataset = 31;
    repeated DataLoaderParameter dataloader = 32;
    repeated Transforms transforms = 33;
    
    repeated Evaluator evaluator = 34;
    
    
    optional string device = 40 [default = "cpu"];
    optional DistributedParameter distributed = 41;

    optional uint32 epoches = 100; 
    optional bool use_amp = 101 [default = false]; 
    // optional float clip_grad_norm = 102 [default = -1];
    
    optional uint32 snapshot = 200 [default = 2];
    optional string log_dir = 201 [default = "./logs"];
    optional string prefix = 202;
    optional string resume = 203;
    
    optional int32 seed = 300;
    optional PrintOptionsParameter printoptions = 301;
}


message DataLoaderParameter {
    optional string name = 1; 
    optional string type = 2 [default = "DataLoader"];
    
    optional uint32 batch_size = 3;
    optional uint32 num_workers = 4;
    optional bool shuffle = 5 [default = false];
    
    optional string dataset = 10;
    optional Phase phase = 11;
    
    optional string module_file = 100; // dataloader
    optional string module_inline = 101; // dataloader
}


message OptimizerParameter {
    optional string name = 1; 
    optional string type = 2;
    optional float lr = 4;
    optional float momentum = 5;
    optional float weight_decay = 6;
    repeated ParamsGroupParameter params_group = 7;

    // optional LRSchedulerParameter lr_scheduler = 50;
    
    optional string module_file = 100;
    optional string module_inline = 101;

}


message ParamsGroupParameter {
    optional string name = 1; 
    optional string params = 2;
    optional string params_inline = 3; // code for exec 
    
    optional float lr = 4;
    optional float momentum = 5;
    optional float weight_decay = 6;
    
    // optional string module_file = 100;
    // optional string module_inline = 101;

}


message LRSchedulerParameter {
    optional string name = 1;
    optional string type = 2;
    optional string optimizer = 3;
    
    repeated float milestones = 10;
    optional float gamma = 11;
    optional int32 last_epoch = 12 [default = -1];
    
    optional string module_file = 100;
    optional string module_inline = 101;
}


message DistributedParameter {
    optional bool enabled = 1;
    optional string type = 2;
    optional string backend = 3;
    optional string init_method = 4;
    optional uint32 world_size = 5;
    optional uint32 nnodes = 6;
    optional bool find_unused_parameters = 7;
}


message PrintOptionsParameter {
    optional uint32 precision = 1;
    optional uint32 threshold = 2;
    optional uint32 linewidth = 3;
}


// modules
enum Phase {
   ALL = 0;
   TRAIN = 1;
   EVAL = 2;
}

message ModuleParameter {
    optional string name = 1; 
    optional string type = 2; 
    repeated string bottom = 3;
    repeated string top = 4;
    
    optional string pretrained = 5;
    optional bool use_pretrained = 6 [default = true];
    
    optional string reset_inline = 7;
    optional string reset_file = 8;
    
    optional Phase phase = 10;

    optional Conv2dParameter conv2d_param = 100;
    optional ResNetParameter resnet_param = 101;
    optional CustomParameter custom_param = 102;
    optional DummyDatasetParameter dummy_dataset_param = 200;
    
    optional Yolov3TargetParameter yolov3_target_param = 300;
    optional Yolov3LossParameter yolov3_loss_param = 301;
    
    optional Resnet18Parameter resnet18_param = 302;
    optional CIFAR10Parameter cifar10_param = 303;
}


message Conv2dParameter {
    optional uint32 in_channels = 1;
    optional uint32 out_channels = 2; 
    repeated uint32 kernel_size = 3; 
    repeated uint32 stride = 4;
    repeated uint32 padding = 5;
    repeated uint32 dilation = 6;
    repeated uint32 groups = 7;
    optional bool bias = 8;
    optional string padding_mode = 9;
}


message ResNetParameter {
    optional string layers = 1;
    optional int32 freeze_at = 2;
}

message Yolov3TargetParameter {
    repeated uint32 strides = 1;
}

message Yolov3LossParameter {
    repeated uint32 strides = 1;
}

message Resnet18Parameter {
    required uint32 num_classes = 1;
    optional bool pretrained = 2;
}

message CustomParameter {
    optional string module_file = 1;
    optional string module_inline = 2;

}

message DummyDatasetParameter {
    optional uint32 n = 1; 
}

message CIFAR10Parameter {
    required string root = 1;
    optional bool train = 2 [default = true];
    optional bool download = 3 [default = true];
    optional string transform = 4;
}


message Transforms {
    message OP {
        optional string name = 1;
        optional string type = 2;
    }
    optional string name = 1;
    repeated OP op = 2;
}


message Evaluator {
    optional string name = 1;
    required string type = 2;
}
