// protoc --python_out=. pp.proto

syntax = "proto2";


// tensor
message TensorShape {
    repeated int64 dim = 1;
}

message Tensor {
    optional TensorShape shape = 1;
    repeated float data = 2 [packed = true];
    repeated float grad = 3 [packed = true];
    // repeated double data_float64 = 4 [packed = true];
    // repeated double grad_float64 = 5 [packed = true];
    // optional bytes data_bytes = 4; // base64.b64encode(numpy.ndarray)
}

message TensorVector {
  repeated Tensor tensors = 1;
}


// model

message ModelParameter {
    
    optional string name = 1;
    repeated ModuleParameter module = 100; // inline
}


// solver 
message SolverParameter {
    
    optional string name = 1;
    
    optional ModelParameter model = 2;  // inline
    optional string model_file = 3; // file
    
    optional string device = 10 [default = "cpu"];
    
    optional OptimizerParameter optimizer = 20;
    optional LRSchedulerParameter lr_scheduler = 21;
    optional DistributedParameter distributed = 22;

    repeated DataLoaderParameter dataloader = 30;
    optional DataLoaderParameter train_dataloader = 31;
    optional DataLoaderParameter test_dataloader = 32;
    optional DataLoaderParameter val_dataloader = 33;
    
    repeated ModuleParameter dataset = 34;
    optional ModuleParameter train_dataset = 35;
    optional ModuleParameter test_dataset = 36;
    optional ModuleParameter val_dataset = 37;

    optional uint32 epoches = 100; 
    
    optional uint32 snapshot = 200 [default = 2];
    optional string log_dir = 201 [default = "./logs"];
    optional string prefix = 202;
    optional string resume = 203;

    optional int32 seed = 300;
    optional PrintOptionsParameter printoptions = 301;

}


message DataLoaderParameter {
    optional string name = 1; 
    optional uint32 batch_size = 2;
    optional uint32 num_workers = 3;
    optional bool shuffle = 4 [default = false];
    
    optional string module_file = 100; // dataset and dataloader
    optional string module_inline = 101; // dataset and dataloader
}


message OptimizerParameter {
    optional string name = 1; 
    optional string type = 2;
    optional float lr = 4;
    optional float momentum = 5;
    optional float weight_decay = 6;
    repeated ParamsGroupParameter params_group = 7;

    optional LRSchedulerParameter lr_scheduler = 50;
    
    optional string module_file = 100;
    optional string module_inline = 101;

}


message ParamsGroupParameter {
    optional string name = 1; 
    optional string params = 2;
    optional string params_inline = 3; // code for exec 
    
    optional float lr = 4;
    optional float momentum = 5;
    optional float weight_decay = 6;
    
    // optional string module_file = 100;
    // optional string module_inline = 101;

}


message LRSchedulerParameter {
    optional string name = 1;
    optional string type = 2;
    
    repeated float milestones = 10;
    optional float gamma = 11;
    optional int32 last_epoch = 12 [default = -1];
    
    optional string module_file = 100;
    optional string module_inline = 101;

}


message DistributedParameter {
    optional string name = 1;
    optional string type = 2;
    optional string backend = 3;
    optional string init_method = 4;
    optional uint32 world_size = 5;
    optional uint32 nnodes = 6;
    
}


message PrintOptionsParameter {
    optional uint32 precision = 1;
    optional uint32 threshold = 2;
    optional uint32 linewidth = 3;
}


// modules

message ModuleParameter {
    optional string name = 1; 
    optional string type = 2; 
    repeated string bottom = 3;
    repeated string top = 4;
    
    optional string pretrained = 5;
    optional bool is_pretrained = 6 [default = true];
    
    optional string reset_inline = 7;
    optional string reset_file = 8;
    
    enum Phase {
       TRAIN = 0;
       TEST = 1;
    }
    optional Phase phase = 10;

    optional Conv2dParameter conv2d_param = 100;
    optional ResNetParameter resnet_param = 101;
    optional CustomModuleParameter custom_param = 102;
    optional DummyDatasetParameter dummydataset_param = 200;
    
}


message Conv2dParameter {
    optional uint32 in_channels = 1;
    optional uint32 out_channels = 2; 
    repeated uint32 kernel_size = 3; 
    repeated uint32 stride = 4;
    repeated uint32 padding = 5;
    repeated uint32 dilation = 6;
    repeated uint32 groups = 7;
    optional bool bias = 8;
    optional string padding_mode = 9;
    
}


message ResNetParameter {
    optional string layers = 1;
    optional int32 freeze_at = 2;
    
}


message CustomModuleParameter {
    optional string module_file = 1;
    optional string module_inline = 2;

}

message DummyDatasetParameter {
    optional uint32 n = 1; 
}

