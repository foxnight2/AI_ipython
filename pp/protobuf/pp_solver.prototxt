# model_file: "./pp_model.prototxt"

model {

    name: "model"
    
    module {
      name: "conv1"
      type: "Conv2d"
      bottom: "data"
      top: "conv1"
      conv2d_param {
        in_channels: 3
        out_channels: 5
        kernel_size: 3
        stride: 2
        padding: [2, 3]
      }
      reset_inline: "nn.init.ones_(module.weight.data)"
    }

    module {
      name: "resnet"
      type: "ResNet"
      bottom: "conv1"
      top: "resnet1"
      resnet_param {
        layers: "34"
      }

    }

    module {
      name: "relu1"
      type: "ReLU"
      bottom: "resnet1"
      top: "relu1"
    }

    module {
      name: "custom1"
      type: "Custom"
      bottom: "resnet1"
      top: "custom1"

      custom_param {
          module_inline: "custom1 = torch.nn.Sigmoid()"
      }
    }
    
    module {
      name: "Yolov3Target_train"
      type: "Yolov3Target"
      bottom: "custom1"
      bottom: "label"
      top: "target"
      yolov3_target_param {
          strides: [8, 16, 32]
      }
      phase: TRAIN
    }
    
    module {
      name: "Yolov3Target_evak"
      type: "Yolov3Target"
      bottom: "custom1"
      top: "target"
      yolov3_target_param {
          strides: [8, 16, 32]
      }
      phase: EVAL
    }


    module {
      name: "Yolov3Loss1"
      type: "Yolov3Loss"
      bottom: "custom1"
      bottom: "target"
      top: "loss"
      yolov3_loss_param {
          strides: [8, 16, 32]
      }
      phase: TRAIN
    }
    
    input_names: ["data", "label"]
    output_names: ["target", "loss"]
}


dataset {
    name: "test_dataset"
    type: "DummyDataset"
    top: "data"
    dummy_dataset_param {
        n: 20
    }
}

dataloader {
    name: "test_dataloader"
    batch_size: 5
    num_workers: 1
    shuffle: false
    dataset: "test_dataset"
    phase: EVAL
}


dataset {
    name: "train_dataset"
    type: "DummyDataset"
    top: "data"
    top: "label"
    dummy_dataset_param {
        n: 100
    }
    
}

dataloader {
    name: "train_dataloader"
    batch_size: 8
    num_workers: 2
    shuffle: true
    dataset: "train_dataset"
    phase: TRAIN

}


optimizer {
    name: "optimizer"
    
    type: "SGD"
    lr: 0.1
    momentum: 0.3
    
    params_group {
        lr: 0.01
        momentum: 0.2
        params_inline: "params_1 = [p for n, p in model.named_parameters() if 'weight' in n]"
    }
    params_group {
        lr: 0.1
        params_inline: "params_2 = [p for n, p in model.named_parameters() if not 'weight' in n]"
    }
    
    # module_file: "./pp_optimizer.py.txt"
    
}

lr_scheduler {
    name: "lr_scheduler_1"
    type: "MultiStepLR"
    gamma: 0.1
    milestones: [10, 20]    
    # module_inline: "lr_scheduler_1 = torch.optim.lr_scheduler.MultiStepLR(optimizer, milestones=[1, 2], gamma=0.1)"
}



device: "cuda"
use_amp: True


distributed {
    enabled: True
    backend: "nccl"
    init_method: "env://"
}

epoches: 2

snapshot: 10
log_dir: "./logs"
prefix: "pp_model"


